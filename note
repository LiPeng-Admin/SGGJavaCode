计算机语言发展迭代史
机器语言->机器语言->高级语言(面向过程，面向对象)
计算机底层都以补码的方式来存储数据
对于正数而言：原码，补码，反码三码合一
对于负数来说，原码除符号位不同(1:表示负数)其他相同
            反码是除符号位与负数的符号位相同外，其他都是反的（负数原码的0变为1,1变为0）
            补码=反码+1
java
在领域的应用：
企业级应用，Android平台应用，大数据平台开发
语言特性：
是一个纯粹的 面向对象 的程序设计语言，继承了C++语言面向对象技术的核心，
舍弃了C语言中容易引起错误的指针，增加了垃圾回收器功能
语言特点：
1、面向对象：
两个基本概念：类，对象
三大特性：封装，继承，多态
2、健壮性：
吸收了C/C++语言的优点，去掉了其影响程序健壮性的部分(如指针，内存的申请与释放)，
                     提供了一个相对安全的内存管理和访问机制
3：跨平台性：
通过java语言编写的应用程序在不同的系统平台上都可以运行
原理：只需要运行java 应用程序的操作系统上，先安装一个Java 虚拟机(JVM Java Virtual Machine)即可
由JVM 负责Java程序在该系统中的运行

核心机制：
java 虚拟机（JVM）
垃圾收集机制

JDK(Java Development Kit Java 开发工具包)
包含了java 的开发工具和JRE
开发工具：
        编译工具（javac.exe）打包工具（jar.exe）等
JRE：
        Java Runtime Environment Java 运行环境
        包括Java虚拟机和Java 程序所需的核心类库等，如果想要运行一个开发好的Java程序，
        计算机中只需要安装安装JRE即可
开发程序：
将java 代码编写到扩展名为.java 的文件中
通过javac 命令对该java 文件进行编译(字节码文件)
通过 java 命令对生成的class 文件进行运行
在一个java 源文件中可以声明多个class ,但是最多有一个类声明为public
且要求声明为public类的类型必须与源文件名相同
每一行执行语句都以";"结束

Java 注释类型
单行注释： //
多行注释：/*  */
单行注释和多行注释特点：不参与编译
文档注释(java特有)：/** */
文档注释特点：注释内容可以被jdk 提供的工具javadoc 解析，
            生成一套以网页文件形式体现的该程序的说明文档
            操作方式：javadoc -d mydoc -author -version HelloWorld.java

Java API 的文档
API（Application Programming Interface）是java 提供的基本编程接口
应用程序=算法+数据结构（主要用于提效）

关键字与保留字
java保留字：现有java 版本尚未使用，但以后版本可能会作为关键字使用，命令标识符要避免使用这些保留字
          如goto ,const

标识符： 定义： java 对各种变量，方法，和类等要素命名时使用的字符序列称为标识符
        技巧： 凡是自己可以起名字的地方都叫标识符
        规则（主要）：由26个英文字母大小写，0-9，_或 $组成
                    数字不可以开头
                    不可以使用关键字和保留字
                    严格区分大小写，长度无限制
                    不能包含空格
         规范：包名：多单词组成时所有字母都小写：xxxyyy
              类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz
              变量名，方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单子首字母大写
                            xxxYyyZzz
              常量名：所有字母都大写，多单词时每个单词用下划线链接:XXX_YYY_ZZZ
Java 中的变量
              是程序中最基本的存储单元，包含变量类型，变量名和存储的值

Java 中的数据类型
               基本数据类型：
                           数值型：整数类型:byte,short,int,long
                                  浮点类型:float,double
                           字符型：char
                           布尔型:boolean
               引用数据类型：
                            类：class  (字符串再这里)
                            接口：interface
                            数组：array

Java 中的运算符
算术运算符，赋值运算符，比较运算符（关系运算符ja），逻辑运算符，位运算符，三元运算符

分支结构
if-else
switch-case

循环结构
for
while
do-while
四个组成部分
初始化部分，
循环条件部分
循环体部分
迭代部分

数组
数组是有序排列的
是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名
数组本身是引用数据类型，而数组中的元素可以是任何数据类型，包括基本数据类型和引用数据类型
创建的数组对象会在内存中开辟一整块连续的空间
数组的长度一旦确定，就不能修改

获取某个范围的随机数[a,b]:(int)(Math.random()*(b-a+1)+a)


* 数组本身是引用数据类型，而数组中的元素可以是任何数据类型，
* 包括基本数据类型和引用数据类型
* 创建的数组对象会在内存中开辟一整块连续的空间
*数组的长度一旦确定，就不能修改
*
* 一维数组的使用
* 1：一维数组的声明和初始化
* 2：如何调用数组的指定位置的元素
* 3：如何获取数组的长度
* 4：如何遍历数组
* 5：数组元素的默认初始化值
一维数组：
        数组元素是整型：0
        数组元素是浮点型:0.0
        数组元素是char型：0，非'0'
        数组元素是布尔型：false

        数组元素是引用类型：null

二维数组：
        针对初始化方式一：如 int[][]ints=new int[4][3]
        外层元素的初始化值为：地址值
        内层元素的初始化为：整型：0，浮点型：0.0，char型：0,布尔型：false,String 或引用数据类型：null
        针对初始化方式二：如 int[][]ints=new int[4][]
        外层元素的初始化值为：null
        内层元素的初始化：npe 异常

* 6：数组的内存解析

数组中的常见异常
1：数组索引越界的异常
2：空指针异常

算法的常见考查（数组）：
        求数值型数组中元素的最大值，最小值，平均数，总和等
        数组的复制，反转，查找（线性查找,二分法查找）


补充部分
数据结构
1：数据与数据之间的逻辑关系：集合，一对一，一对多，多对多
2：数据的存储结构
线性表：顺序表（如:数组）,链表，栈，队列
树形结构：二叉树
图形结构：

算法：
排序算法
搜索算法

面向对象三条主线
1：java 类及类的成员
2：面向对象的三大特征
3：其他关键字

类和对象是面向对象的核心概念
类是对一类事物的描述，是抽象的，概念上的定义
对象是实际存在的该类事物的每个个体，因而也称为实例

1:设计类，其实就是设计类的成员
    属性=成员变量=field=域、字段
    方法=成员方法=函数=method
    创建类的对象=类的实例化=实例化类
*
2:类和对象的使用
1：创建类，设计类的成员
2：创建类的对象
3：通过"对象.属性"或"对象.方法"调用对象的结构

3:若创建一个类的多个对象，则每个对象都独立的拥有一套类的属性(非static )
    若修改了一个对象的属性a,不影响另外一个对象属性a 的值


类中属性的使用
 属性（成员变量）vs 局部变量
 1： 相同点：
        1.1：定义变量的格式：数据类型 变量名=变量值
        1.2：先声明，后使用
        1.3：变量都有其对应的作用域
 2：不同点：
        2.1:在类中声明的位置不同
        属性（成员变量）：直接定义在类的一对{}内
        局部变量：声明在方法内，方法形参，代码块内，构造器形参，构造器内部的变量
        2.2关于权限修饰符的不同
        属性：可以在声明属性时，指明其权限，使用权限修饰符
        常用的权限修饰符：private,public,缺省,protected,（不写默认是缺省的）==>封装性
        局部变量是不可以使用权限修饰符的
        2.3默认初始化值的情况
        属性：类的属性，根据其类型，都有默认初始化值
              整型：0
              浮点：0.0
              字符型：0
              布尔型：false
              引用数据类型(类，接口，数组)：null

        局部变量:没有默认初始化值，需要显示赋值
                注意:形参在调用时，需要赋值

         2.4 在内存中加载的位置
         属性：加载在堆空间中（非static）
         局部变量：加载在栈空间


类中方法的声明和使用
方法：描述类应该具有的功能
比如：Math类：sqrt()\random()\...
     Scanner类：nextInt()...
     Arrays类：toString()\equals()\...
     1:举例
     public void eat(){}
     public void sleep(int hour){}
     public String getName(){}
     public String getNation(String nation){}

     2:方法的声明：权限修饰符 返回值类型 方法名（形参列表）{
     方法体
     }
     注意：static,final,abstract 来修饰的方法，详见后面

     3：说明：
     3.1关于权限修饰符
        Java规定的4个权限修饰符：private,public,缺省，protected
     3.2返回值类型：有返回值 vs 没有返回值
            3.2.1  如果方法有返回值，则必须在方法声明时，指定返回值的类型，
                    同时，方法中需要使用return 关键字来返回指定类型的变量或常量
                    若方法没有返回值，则方法声明时，使用void来表示，通常，没有返回值的方法中，
                    不需要使用return ，但是，若使用的话，只能只用"return;"来表示结束此方法的意思

            3.2.2 我们定义方法需不需要返回值？
                    1：需求
                    2：经验

       3.3 方法名：属性标识符
       3.4形参列表：方法可以声明0或1个或多个
       格式：数据类型1 形参1,数据类型2 形参2,....

       3.5方法体

      4： return 关键字的作用
       1：适用范围:使用在方法体中
       2：作用：11:结束方法
               22：针对有返回值类型的方法，使用"return 数据"方法返回所要的语句
               33：return 关键字后面不可以声明执行语句

       5:方法的使用中，可以调用当前类的属性和方法
                    特殊的：方法A中又调用了方法A :递归方法
                   方法中不可以定义方法


JVM内存结构
    编译完程序以后，生成一个或多个字节码文件
    我们使用JVM 中的类的加载器和解释器对生成的字节码文件进行解释运行。
    意味着，需要将字节码文件对应的类加载到内存中，涉及到内存解析

    虚拟机栈：即平时提到的栈结构。局部变量存在在栈结构中
    堆：     将new 出来的结构（如数组，对象）加载在堆空间中。
            补充：对象的属性（非static）加载在堆空间中
    方法区：  类的加载信息，常量池，静态域

一：理解”万事万物皆对象“
    1：在Java语言范畴中，我们都将功能，结构等封装到类中，通过类的实例化。来调用具体结构的功能结构
    2：涉及到Java 语言与前端Html，后端的数据库交互时，前后端的结构在Java 层面交互时，都体现为类，对象

二：内存解析的说明
    1：引用类型的变量，只可能存储两类值：null或地址值（含变量的类型）

三：匿名对象
    理解：创建的对象，没有显示的付给一个变量名；
          直接 new Phone().属性、方法
    特征： 匿名对象只能调用一次
    使用：

方法
   方法的重载
   *   定义：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或参数类型不同即可
   *         "两同一不同"：同一个类，相同方法名
   *                     参数列表不同：参数个数不同，参数类型不同
   *   举例：
   *        Arrays类中重载的sort()/binarySearch()
   *
   *   判断是否是重载：
   *         与方法的权限修饰符，返回值类型，形参变量名，方法体没有关系
    示例：
    //返回连个整数的和
    int add(int x,int y){
    return x+y;
    }
    //返回三个整数的和：
    int add(int x,int y,int z){
    return x+y+z
    }
    //返回两个小数的和：
    double add(double x,double y){
    return x+y;
    }

    可变形参的方法
        javaSE5,允许直接定义能和多个实参相匹配的形参。
        1：可变形参的格式：数据类型 ... 变量名
        2:当调用可变个数形参的方法时，传入的参数可以是：0,1,2,。。。
        3:可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载
        4：可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载
        5:可变个数形参在方法的形参中，必须声明在末尾
        6：可变个数形参在方法的形参中，最多只能声明一个可变形参


java中方法参数的传递机制： 值传递机制（重难点）
     方法的形参的传递机制：值传递
     * 1：形参：方法定义时，声明在小括号内的参数
     *    实参：方法调用时，实际传递给形参的数据
     *
     * 2：值传递机制
     *   如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值
     *   如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值

     推广：
     关于变量的赋值
          如果变量是基本数据类型，此时赋值的是变量所保存的数据值
          如果变量是引用数据类型，此时复制的是变量所保存的数据地址值


递归方法
    使用
        1：递归方法：一个方法内调用它本身
        2：方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无需循环控制，
           递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环



* 面向对象的特征一：封装与隐藏
* 一：问题的引入
    * 当我们创建一个类的对象以后，我们可以通过“对象.属性”的方式，对对象的属性进行赋值，
    * 这里，赋值操作受到属性的数据类型和存储范围的制约，除此之外，没有其他制约条件。
    * 但是，在实际问题中，我们往往需要给属性赋值加入额外的限制条件，这个条件就不能再属性声明时
    * 体现，我们只能通过方法进行限制条件的添加，（如setLegs），同时我们需要避免用户在使用"对象.属性"
    * 的方式来对属性进行赋值，需要将属性声明为私有的（private）->此时，针对于属性就体现为封装性

* 二：封装性的体现
    * 我们将类的属性私有化xxx（private）,同时，提供公共的（public）方法来获取（getXxx）和设置(setXxx)此属性的值
    *   拓展：属性的私有化，方法的私有化，单例模式。。。。

* 三：封装性的体现，需要权限修饰符的配合
    * 1：Java 规定的4种权限（从小到大）：private,缺省,protected,public
    * 2:4种权限可以用来修饰类及类的内部结构：属性，方法，构造器，内部类
    * 3：具体的，4种权限都可以用来修饰符类的内部结构：属性，方法，构造器，内部类
    *           修饰类：只能使用：缺省，public


类的结构之三：构造器（或构造方法）的使用: Constructor
 * 一：构造器的使用
     * 创建对象
     * 给对象初始化
   二：说明
   * 1：如果没哟显示的定义类的构造器的话，则系统默认提供一个空参的构造器
   * 2：定义构造器的格式：
   * 权限修饰符 类名（形参列表）{
   * }
   * 3：类中可以定个多个构造器，彼此构成重载
   * 4：一旦我么定义了类的构造器之后，系统就不在提供了默认的空参构造器
   * 5：一个类中，至少会有一个构造器

 属性赋值
   1：默认初始化
   2：显示初始化
   3：构造器中赋值
   4：通过"对象.方法"或"对象.属性"的方式赋值
赋值 先后顺序 1->2->3->4

 JavaBean 是一种Java 语言写成的可重用组件（符合如下标准的Java 类）
    类是公共的
    有一个无参的公共的构造器
     有属性且有对应的get,set 方法

 this 关键字的使用
 * 1：this 可以用来修饰：属性，方法，构造器
 * 2: this 修饰符属性和方法
     *this理解为：当前对象 或当前正在创建的对象
     *      2.1：在类的方法中，我们可以使用"this.属性"或"this.方法"的方式，来调用当前对象的属性或方法
     *      但是通常情况下，我们会省略"this.",特殊情况下，如果方法的形参与类的属性同名是，我们必须
     *      显示的使用"this.变量"的方式，表明此变量时属性，非形参
     *

      *     2.2在类的构造器中，我们可以使用"this.属性"或"this.方法"的方式，来调用当前正在创建的对象的属性或方法
      *     但是通常情况下，我们会省略"this.",特殊情况下，如果构造器的形参与类的属性同名是，我们必须
      *     显示的使用"this.变量"的方式，表明此变量时属性，非形参
 *3:this   修饰或调用构造器
 *          3.1:我们在类的构造器中，可以显示的使用“this(形参列表)” 方式，调用本类中的其他构造器
 *          3.2:构造器中不能通过“this(形参列表)”方式调用自己
 *          3.3：如果一个类中有n 个构造器，则最多有n-1 构造器使用了“this(形参列表)”
 *          规定：“this（形参列表）“必须声明在当前构造器的首行

一:package 关键字的使用
    * 1：使用package 声明类或接口所属的包，声明在源文件的首行
    * 2：包，属于标识符，遵循标识符的命名规则
    * 3：每"."一次，代表一层文件目录

二：import 关键字的使用
    * 1：在源文件中显式的使用import 结构导入指定包下的类，接口
    * 2：声明在包的声明和类的声明之间
    * 3：如果使用的类或接口是 java.lang 包下定义的，则可以省略import 结构
    * 4：如果使用的类或接口是本包下定义的，则可以省略 import 结构
    * 5：如果在源文件中，使用不同包下的同名的类，则必须至少有一个类需要以全类名(包含包名的类名)的方式显示
    *6：import static：导入指定类或接口中的静态结构:属性或方法

面向对象的特征之二：继承性
* 一：继承性的优势：
* 1：减少代码的冗余，提高了代码的复用性
* 2：便于功能的扩展
* 3：为之后的多态性的使用，提供了前提
* 二：继承性的格式：class A extends B{}
* A:子类，派生类
* B：父类，超类，基类
*     2.1体现：一旦子类A 继承了父类B 以后，子类A中就获取了父类B 中声明的结构：属性，方法
*      特别的，父类中声明为privated 的属性和方法，子类继承父类后，仍然认为获取了父类中私有的结构
*      只是因为封装性的影响，使得子类不能直接调用父类的结构而已
*    2.2 子类继承父类以后。还可以声明自己特有的属性或方法，实现功能的扩展
*     子类和父类的关系，不同于子集和集合的关系
*
* 三：java 中关于继承性的规定
* 1：一个类可以被多个子类继承
* 2：java 中的单继承性：一个类只有一个父类
* 3：子父类是相对的概念
* 4：子类继承父类，也就继承直接或间接父类中声明的所有属性和方法
*
*四：1:如果我么没有显式的声明一个类的父类，则此类继承于java.lang.Object 类
*   2：所有的java 类（java.lang.Object 类）,都直接或间接的继承于java.lang.Object类

*方法的重写（override/overwrite）
* 1：重写：子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作
* 2：应用：重写以后，当创建子类对象以后，通过子类对象调用父类中的同名同参数的方法时，实际执行的是子类重写父类的方法
* 3：重写的规定：
*           方法的声明：权限修饰符 返回值类型 方法名（形参列表）throws 异常类型{
                    方法体
                    }
                    约定俗成：子类中的叫重写的方法，父类中的叫被重写的方法
                    * 1：:子类重写的方法名与形参列表与父类被重写的方法名与形参列表相同

                    * 2：权限修饰符：子类重写的方法权限修饰符不小于父类被重写的方法的权限修饰符

                    *              特殊情况：子类不能重写父类中声明为private权限的方法

                    * 3：返回值类型：
                    *               若父类被重写的方法的返回值类型时void ，则子类重写的方法返回值类型也是void
                    *               若父类被重写的方法的返回值类型是A类，则子类重写的方法返回值类型是A类或A类的子类
                    *               若父类被重写的方法的返回值类型是基本数据类型，则子类重写的方法返回值必须是相同的基本数据类型

                    * 4：子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型
                    *
                    * 额外的：子类和父类的同名同参数的要么声明为非static(考虑重写),要么生命为static(不是重写)

 super关键字的使用
* 1：super理解：父类的
* 2：super可以用来调用属性，方法，构造器
* 3：super 的使用:属性和方法
* 3.1 我们可以在子类的方法或构造器中，通过使用"super.属性"或"super.方法"的方式显示调用
*      父类声明的属性或方法，但是通常情况会省略"super."
* 3.2 特殊情况：当子类和父类中定义了同名的属性时，我们想在子类中调用父类中声明的属性，则必须
*      显示的使用"super.属性"的方式，表明调用的是父类中声明的属性
* 3.3 特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，必须
*      显示的使用"super.方法"的方式，表明调用的是父类中声明的方法
*
* 4：super 的使用：构造器
* 4.1 在子类的构造器中显示的使用"super(形参列表)"的方式，调用父类中声明的指定的构造器
* 4.2 "super（形参列表）"的使用，必须声明在子类构造器的首行
* 4.3 我们在类的构造器中，针对于"this（形参列表）"或super(形参列表)"只能二选一，不能同时出现
* 4.4 在构造器的首行，没有显示的声明"this(形参列表)"或"super(形参列表)"，则默认调用的是 父类中空参的构造器：super()
* 4.5 在类的构造器中，至少有一个类的构造器中使用了"super(形参列表)"，调用了父类的构造器


子类对象实例化的全过程
* 1：从结果来看（继承性）
*       子类继承父类以后，就获取父类中升到属性和方法
*       创建子类的对象，在堆空间中，就会加载所有父类中声明的属性
* 2：从过程来看
*       当我们通过子类的构造器创建子类对象时，我么一定会直接或间接的调用其父类的构造器
        进而调用父类的父类的构造器。。，直到调用了java.lang.Object类中空间的构造器，正因为
        加载了所以父类的结构，所以才看到内存中父类的结构，子类对象才可以考虑进行调用
*

面向对象之三：多态性
* 1:理解多态性：可以理解为一个事物的多种形态
* 2:何为多态性：
*       对象多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）
* 3：多态的使用：虚拟方法调用
*       有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但是在运行期，我们实际执行的是子类重写父类的方法
*       总结：编译，看左边；运行，看右边
* 4：多态性使用的前提
*        1：类的继承关系，2：方法的重写
*
* 5:对象的多态性只适用于方法，不适用于属性（编译与运行都看左边）

有了对象的多态性后，内存中实际是加载了子类特有的属性和方法，但是由于变量声明为父类类型，
        //导致编译时，只能调用父类中声明的属性和方法，子类特有属性和方法不能调用

 如何调用子类特有的属性和方法
 向下转型：使用强制类型转换符
         instanceof关键字的使用
              a instanceof A:判断对象a是否是类A的实例，如果是，返回true ,如果不是，返回false
              使用情境：为了避免向下转型时出现ClassCastException的异常，我们在向下转型之前，进行
              instanceof的判断，一旦返回true,就进行向下转型，如果返回false,不进行向下转型

              如果a instanceof A,返回true,则 a instanceof B 也返回true (其中，类B是类A的父类)

重载与重写的区别
1；定义
2：具体规则
3：重载：不表现为多态性，重写：表现为多态性

java.lang.Object 类
1：Object 类是所有java类的父类
2：如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类
3:Object 类中的功能（属性，方法）具有通用性
属性：无
方法：equals()/toString()/getClass()/hashCode()/clone()/findlize()/wait()/notify()...
Object类 中只声明了一个空参构造器

面试题：== 与equals（）区别
一：回顾 == 的使用
1：可以使用在基本数据类型变量和引用数据类型变量中
2：如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等（不一定类型要相同）
   如果比较的是引用数据类型变量：比较两个对象的地址值是否相同，即两个引用是否指向同一个对象实体

二：equals()方法的使用
1：是一个方法，而非运算符
2：只能使用引用数据类型
3:Object 类中equals（）的定义：
    public boolean equals(Object obj) {
        return (this == obj);
    }
    说明：Object类中定义的equals()方法与== 的作用是相同的，即两个引用是否指向同一个对象实体

4：对于如String,Date,File,包装类等都重写了Object类中的equals()方法，重写以后，比较的不是两个引用
    的地址是否相同，而是比较两个对象的"实体内容"是否相同

5：通常情况下，我们自定义的类如果使用equals()的话，也通常比较两个对象的"实体内容"是否相同，
    那么，我们需要重写Object 类中equals()方法

* Object 类中toString ()的使用
* 1：当我们输出一个对象的引用时，实际上就是调用当前对象的toString()
* 2：Object 类中toString()的定义：
*       public String toString() {
            return getClass().getName() + "@" + Integer.toHexString(hashCode());
        }
  3： 对于String,Date,File,包装类等重写了Object 类中的toString ()方法,使得在调用对象的toString()时，返回"实体内容"信息

 * 4：自定义类也可以重写toString()方法，当调用此方法时，返回对象的"实体内容"

 包装类的使用
 * java 提供了8种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征
 * 掌握的：基本数据类型，包装类，String 三者之间的互相转换
 注意：转换时，可能会报NumberFormatException

 基本数据类型，包装类--->String类型：
             调用String重载的valueOf(xxx)
 String 类型--->基本数据类型，包装类:
              调用包装类的parseXxx()

 Java 5.0新特性：自动装箱与自动拆箱
 自动装箱:
        基本数据类型--->包装类
 自动拆箱：
        包装类--->基本数据类型
补充：  Interger内部定了IntergerCache结构，IntergerCache
          * 中定义了Interger[],保存了从-127-128范围的整数，如果我们使用自动装箱的方式，
          * 给Interger赋值的范围在-128-127范围内时，可以直接数组中的元素，不用再去new了
          * 目的：提高效率

static 关键字的使用
* 1:static:静态的
* 2：static可以用来修饰：属性，方法，代码块，内部类
* 3：使用static修饰属性；静态变量/属性
*   3.1属性：按照是否使用static修饰分为：静态属性/变量(或类变量) vs 非静态属性/变量（实例变量）
*
*   实例变量：我们创建了类的多个对象。每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象的非静态属性时，
*           不会导致其他对象中同样的属性值的修改
*   静态变量：我们创建了类的多个对象，多个对象共享了同一个静态属性（变量），当通过某一个对象修改静态变量时，会导致
*           其他对象调用此静态变量时，是修改过了的
*
*  3.2使用static修饰属性的其他说明
*           1:静态变量随着类的加载而加载，可以通过"类.静态变量"方式进行调用
*           2:静态变量的加载早于对象的创建
*           3:由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中
*
*  3.3 静态属性的举例：System.out,Math.PI
*
*
* 4：使用static修饰方法：静态方法
*           1：随着类的加载而加载，可以通过"类.静态方法"的方式进行调用
*           2:       静态方法     非静态方法
*               类    yes           no
*
*               对象   yes           yes
*
*           3:静态方法中，只能调用静态的方法或属性
*             非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性
*
* 5：static注意点：
*          在静态的方法内，不能使用this,super 关键字
*
* 6:    在开发中，如何确定一个属性是否声明为static？
*           属性是可以被多个对象所共享的，不会随着对象的不同而不同的
*
*       在开发中，如何确定一个方法是否声明为static？
*           操作静态属性的方法，通常设置为static
*           工具类中的方法，习惯上声明为static,如：Math,Arrays,Collections


final：最终的
* 1：final可以用来修饰的结构：类，方法，变量
* 2：final 用来修饰类：此类不能被其他类继承，如String,System,StringBuffer等类
* 3：final 用来修饰方法，表名此方法不可以被重写,如Object类中getClass();
* 4:final用来修饰变量：此时的“变量”就称为一个常量
*   4.1:final修饰属性：可以考虑赋值的位置有：显示初始化，代码块初始化,构造器初始化
*   4.2：final修饰局部变量：尤其是使用final修饰形参时，表明此形参是一个常量，当我们调用
*                         此方法时，给常量形参赋一个实参，一旦赋值以后，就只能在方法体内使用此形参，
*                         但不能进行重新赋值
*
* static final 用来修饰属性，方法
*                  修饰属性：全局常量

*
单例设计模式：
* 1：所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例
* 2：如何实现？
*       1：饿汉式：
*               1:私有化类的构造器
*:              2：内部创建类的对象(要求此对象必须声明为静态的)
*               3：提供公共的静态方法，返回类的对象

代码：//饿汉式
   class Bank{
       //1:私有化类的构造器
       private Bank(){

       }
       //2：内部创建类的对象(要求此对象必须声明为静态的)
       private static Bank instance=new Bank();
       //3:提供公共的静态方法，返回类的对象
       public static Bank getInstance(){
           return instance;
       }

   }
*
*       2:懒汉式:
                1：私有化类的构造器
                2:声明当前类对象，未初始化(要求此对象必须声明为静态的)
                3:声明公共的，static的返回类当前类对象的方法

代码：
class Order{
    //1：私有化类的构造器
    private Order(){

    }
    //2:声明当前类对象，未初始化(要求此对象必须声明为静态的)
    private static Order instance=null;

    //3:声明公共的，static的返回类当前类对象的方法
    public static Order getInstance(){ //-->多线程时在修改
        if(instance==null){
            instance=new Order();
        }
        return instance;

    }
}


  3:区分懒汉式与饿汉式：
  *     饿汉式： 优点：线程是安全的
  *             缺点：对象家在的时间过长
  *
  *     懒汉式： 优点：延迟对象的创建
  *             缺点：目前的写法线程是不安全的-->多线程时在修改




类的成员之四：代码块（或初始化块）
* 1：代码块的作用：用来初始化类，对象
* 2:代码块如果有修饰，只能使用static
* 3:分类：静态代码块与非静态代码块
* 4：静态代码块
*       1：内部可以有输出语句
*       2:随着类的加载而执行,而且只会执行一次
*       3：初始化类的信息
*       4：如果一个类中定义了多个静态代码块，则按照声明的先后顺讯执行
*       5：静态代码块的执行早于非静态代码块的执行
*       6:静态代码块只能调用静态的属性，方法，不能调用非静态的属性和方法
* 5：非静态代码块
*       1：内部可以有输出语句
*       2:随着对象的创建而执行，每创建一个对象就会执行一次非静态代码块
*       3:作用：可以在创建对象时，对对象的属性等进行初始化
*       4：如果一个类中定义了多个非静态代码块，则按照声明的先后顺讯执行
*       5:非静态代码块即能调用非静态的属性，方法，也能调用静态的属性和方法
*

总结：执行顺序：由父及子，静态先行


* 对属性可以赋值的位置
* 1：默认初始化
* 2：显示初始化
* 3：构造器中初始化
* 4：有了对象以后，可以通过"对象.属性"或"对象.方法"的方式，进行赋值
* 5：代码块中赋值

重点：执行顺序：①-②/⑤-③-④

 abstract关键字的使用
* abstract：抽象的
* abstract：抽象的
* abstract可以用来修饰的结构：类，方法
* abstract修饰类：抽象类
*         此类不能实例化
*         抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）
*         开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作
*
* abstract修饰方法：抽象方法
*           抽象方法只有方法的声明，没有方法体
*           包含抽象方法的类，一定是抽象类。反之，抽象类中可以没有抽象方法
*           若子类重写了父类中的所有的抽象方法后，此子类方可实例化
*           若子类没有重写父类中的所有的抽象方法，则子类也是一个抽象类，需要使用abstract修饰
*
* 注意点：
    *       abstract 不能用来修饰：属性，构造器等结构
    *       abstract 不能用来修饰私有方法，静态方法，final 的方法，final类

接口的使用

*1：接口使用interface来定义
*2:java中接口和类是并列的两个结构
*3：如何定义接口：接口中的成员
*       3.1：jdk7及以前：只能定义全局常量和抽象方法
*           全局常量：public static final(可以省略)
*           抽象方法：public abstract
*       3.2: jdk8及以后：除了定义全局常量及抽象方法外，还可以定义静态方法和默认方法（略）
*
* 4：接口中不能定义构造器，意味这不能实例化
* 5：java开发中，接口通过类去实现（implements）的方式来使用
*           如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化
*           如果实现类没有覆盖接口中的所有抽象方法，则此实现类仍为抽象类
*
* 6:java类可以实现多个接口 -->弥补了java 单继承的局限性
*
*   格式：class AA extends BB implements CC,DD,EE
*
* 7:接口与接口之间可以继承，而且可以多继承
* *******************
* 8:接口的具体使用，体现多态性
* 9：接口，实际上是一种规范


知识点1：接口中定义的静态方法，只能通过接口来调用

知识点2：通过实现类的对象，可以调用接口中的默认方法
如果实现类重写了接口中的默认方法，则调用是重写的方法

知识点3；如果子类（或实现类）继承的父类和实现的接口声明了同名同参数的方法
那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法 --类优先原则

知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，
那么在实现类没有重写此方法的情况下，报错  --》接口冲突
需要在实现类中重写此方法

知识点5：如何在子类（或实现类）中调用父类，接口被重写的方法
        调用父类：super.方法名
        调用接口：接口名.super.方法名


面试题：接口与抽象类的异同
    相同点：不能实例化；都可以包含抽象方法
    不同点：通过抽象类和接口的定义，内部结构解释说明
           类：单继承性，接口：多继承
           类与接口：多实现


类的内部成员之五：内部类
* 1：java 中允许将一个类A声明在另一个类B中，则类A就是内部类，类B是外部类
* 2：内部类的分类：成员内部类 vs 局部内部类（方法类，代码块内，构造器内）
* 3:成员内部类：
*      一方面,作为外部类的成员：
*         调用外部类的结构
*         可以被static修饰
*         可以被4种不同的权限修饰
*
*     另一方面,作为一个类：
*          可以定义属性，方法，构造器等
*          可以用final修饰，表明此类不能被继承
*          可以被abstract 修饰，表明此类不能被实例化
*
* 4:关注如下的3个问题
*   4.1：如何实例化成员内部的对象
*       //创建Man实例（静态的成员内部类）
        Person.Man man=new Person.Man("张三",28);
       man.show();

       //创建Woman实例（非静态的成员内部类）
        Person person=new Person();
        Person.Woman woman=person.new Woman();
        woman.washHand();
        woman.display("王道乾");
*
*   4.2：如何在成员内部类中区分调用外部类的结构
*             System.out.println(name); //方法的形参
              System.out.println(this.name); //内部类的属性
              System.out.println(Person.this.name); //外部内的属性
*
*   4.3：开发中局部内部类的使用
*       代码如下：
            * public class InnerClassTest1 {
                //开发中常使用：返回一个实现了Comparable接口的类的对象

                public Comparable getComparable(){

                    //方式一：
                    //创建一个实现了Comparable接口的类：局部内部类
            //        class MyComparable implements  Comparable{
            //            public int compareTo(Object o) {
            //                return 0;
            //            }
            //        }
            //        return  new MyComparable();
            *
                    //方式二：
                    return new Comparable() {
                        public int compareTo(Object o) {
                            return 0;
                        }
                    };

                }
            }

*
*
* */

注意点：（移动端开发使用场景较多）
/*
 *在局部内部类的方法中（如show）如果调用局部内部类所声明的方法（如method）中的
 * 局部变量（如num）,要求此局部变量声明为final的
 */

public class InnerClassTest2 {
    int num=10; //此变量num 声明的是final,不能重新赋值，final省略
    public void method(){
        class AA{
            public void show(){
                System.out.println(num);
            }

        }
    }
}

异常：
Error:
    Java 虚拟机无法解决的严重问题，如：JVM 系统内部错误，资源耗尽等严重情况
     比如：StackOverflowError和OOM，一般不编写针对性的代码进行处理

         public static void main(String[] args) {
             //栈溢出：java.lang.StackOverflowError
     //        main(args);
             //堆溢出：java.lang.OutOfMemoryError:OOM
             Integer [] arr=new Integer[1024*1024*1024];
         }

一：异常体系结构
* java.lang.Throwable
*       Error
*       Exception
*          编译时异常（checked）
*             如：   IOException  ClassNotFoundException
*
*          运行时异常：(unchecked)
*             如：   NullPointerException ArrayIndexOutOfBoundsException
*                   ClassCastException  NumberFormatException
*                   InputMismatchException  ArithmeticException

public class ExceptionTest {

}
    //ArithmeticException
    @Test
    public void test6(){
        int a=10;
        int b=0;
        System.out.println(a/b);
    }

     //InputMismatchException
    @Test
    public void test5(){
        Scanner scanner=new Scanner(System.in);
        System.out.print("请输入你的成绩：");
        int score=scanner.nextInt();
        System.out.println(score);

    }

    //NumberFormatException
    @Test
    public void test4(){
        String str="123";
        str="abc";
        Integer integer=Integer.parseInt(str);

        System.out.println(integer);
    }

    //ClassCastException
    @Test
    public void test3(){
        Object o=new Date();
        String str=(String) o;
        System.out.println(str);
    }

    // IndexOutOfBoundsException
    @Test
    public void test2(){

        //ArrayIndexOutOfBoundsException
//        int [] arr=new int[3];
//        System.out.println(arr[3]);

        //StringIndexOutOfBoundsException
        String str="abcd";
        System.out.println(str.charAt(5));
    }


    //NullPointerException
    @Test
    public void test1(){
//        int [] arr=null;
//        System.out.println(arr[2]);
        String str="abc";
        str=null;
        System.out.println(str.toString());


    }

一：异常处理：抓抛模型
*
*     过程一："抛"：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象，并
*             将此对象抛出。一旦抛出对象后，其他的代码就不在执行

            关于异常对象的产生：①系统自动生成的异常对象
            *                ②手动的生成一个异常对象,并抛出（throw）

*     过程二："抓"：可以理解为异常的处理方式：①try-catch-finally,②throws
*
*二：异常处理机制方式一：try-catch-finally的使用
*     try{
* //可能出现异常的代码
* }catch(异常类型1 变量名1){
* //处理异常的方式1
* }catch(异常类型2 变量名2){
* //处理异常的方式2
* }catch(异常类型3 变量名3){
 * //处理异常的方式3
 * }
 * ...
 *
 *}finally{
 * 一定会执行的代码
 * }
*说明：
* 1:finally 是可选的
* 2:使用try 将可能出现异常的代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象
*   根据此对象的类型，去catch 中进行匹配
* 3：一旦try 中的异常对象匹配到某一个catch 时，就进入catch中进行异常的处理，一旦处理完成，跳出当前的
* try-catch 结构（在没有写finally的情况）继续执行其后的代码
* 4：若catch中的异常类型没有子父类关系，则谁声明在上，谁声明在下无所谓
*    若满足子父类关系，则要求子类一定声明在父类上面
*
* 5:常用的异常处理方式：①e.getMessage()② e.printStackTrace()
* 6:在try 结构中定义的变量，在出了try结构以后，不能再被调用
*
* 体会1：使用try-catch-finally 处理编译时异常，使得程序在编译时就不在报错，但是运行时仍可能报错，相当于我们是用
*       try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现
*
* 体会2：开发中，由于运行时异常比较常见，所以我们通常不针对运行时异常编写try-catch-finally
*       针对编译时异常，一定要考虑异常处理
*
* finally{
 * 一定会执行的代码
 * }
 * 1:finally 是可选的
 * 2：finally 中声明的是一定会被执行的代码，即使catch 中又出现异常了，try中又return 语句，catch 中有return语句等情况
 * 3:对于数据库链接，输入输出流，网络编程socket等资源，jvm 是不能自动回收的我们需要自己手动的资源的释放
 * 此时的资源释放就需要声明在finally 当中

三：异常处理机制的方式二：throws+异常类型

* 1:throws+异常类型 写在方法的声明处，指明此方法执行时，可能会抛出的类型，一旦当方法体执行时，出现异常，仍会在异常代码处生成
* 一个异常类的对象。此对象满足throws 后异常类型时，就会被抛出。异常代码后续的代码将不再执行
* 2：体会：try-catch-finally:真正的将异常处理了
*         throws+异常类型：只是将异常抛给方法的调用者并没有真正的讲异常处理掉

方法重写的规则之一：
* 子类重写的方法抛出的异常类型不大于父类被重写的方法的异常类型

四：手动的生成一个异常对象,并抛出（throw）
 throw new RuntimeException("输入的数据非法"); //手动的生成一个异常对象,并抛出（throw）：运行时异常
 throw new Exception(); //编译时异常

五：如何自定义异常类：
    * 1:继承于现有的异常结构：RuntimeException ,Exception
    * 2:提供全局常量：serialVersionUID
    * 3：提供重载的构造器

面试题：
throw 与throws的区别
throw 表示抛出一个异常类的对象，生成异常对象的过程，声明在方法体内
throws 属于异常处理的一种方式，声明在方法的声明处

 命令行输入参数（idea）：
 ALT + SHIFT + F10，右，Edit，回车键，Tab键，输入命令行行参数，回车


程序：
    是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码
进程：
    程序的一次执行过程，或是正在运行的一个程序。 说明：进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域
线程：
    进程可进一步细化为线程，是一个程序内部的一条执行路径。 说明：线程作为调度和执行的单位，
    每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。

进程可以细化为多个线程。 每个线程，拥有自己独立的：栈、程序计数器 多个线程，共享同一个进程中的结构：方法区、堆。

一个Java应用程序java.exe，其实至少三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。
当然如果发生异常，会影响主线程

并行：
    多个CPU同时执行多个任务。比如：多个人同时做不同的事。

并发：
    一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事

多线程程序的优点：
    提高应用程序的响应。对图形化界面更有意义，可增强用户体验。
    提高计算机系统CPU的利用率。
    改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。

 多线程的创建：
* 方式一：继承于Thread类
*           ①创建一个继承于Thread 类的子类
*           ②重写Thread 类的run ()方法 -->将此线程执行的操作声明在run()
*           ③创建Thread类的子类对象
*           ④通过此对象调用start()方法
示例代码如下：
 class PrimeThread extends Thread {
         long minPrime;
         PrimeThread(long minPrime) {
             this.minPrime = minPrime;
         }

         public void run() {
             // compute primes larger than minPrime
              . . .
         }
     }

The following code would then create a thread and start it running:

     PrimeThread p = new PrimeThread(143);
     p.start();
*
注意点： //问题1：不能通过调用run()方法的形式启动线程
//        myThread.run();
        //问题2：再启动线程，遍历100以内的偶数：不可以还让已经start()的线程去执行，
        // 会报异常：IllegalThreadStateException
        //需要重新创建一个线程对象


测试Thread 类的常用方法
* 1：start():启动当前线程；调用当前线程的run()方法
* 2：run()：通常需要重写Thread类中的此方法，将要创建的线程要执行的操作声明在此方法中
* 3：currentThread():静态方法，返回执行当前代码的线程
* 4：getName():获取当前线程的名字
* 5：setName():设置当前线程的名字
* 6:yield()释放当前cpu 的执行权
* 7:join()：在线程A中调用线程B的join(),此时线程A就进入阻塞状态，直到线程B 完全执行完成后，线程A结束阻塞状态
* 8：stop():已过时，当执行此方法时，强制结束当前线程
* 9：sleep():让当前线程睡眠指定的millitime 毫秒，在指定的millitime 毫秒时间内，当前线程阻塞状态
* 10：isAlive():判断当前是否还存活
*
* 线程的优先级：
* 1:
*   MAX_PRIORITY = 10
*   NORM_PRIORITY = 5 -->默认优先级
*   MIN_PRIORITY = 1
* 2:如何获取和设置当前线程的优先级
*   getPriority()
*   setPriority()
*
* 说明：高优先级的线程要抢占低优先级线程cpu的执行权，但是只是从概率上讲，高优先级的线程高概率的情况下被执行
*       并不意味着只有当高优先级的线程执行完成后，低优先级的线程才执行

创建多线程的方式二：实现Runnable接口
*   1:创建一个实现Runnable接口的类
*   2：实现类去实现Runnable中的抽象方法run()方法
*   3:创建实现类的对象
*   4：将此对象作为参数传递到Thread类的构造器中，创建Thread 类的对象
*   5：通过Thread 类的对象调用start()方法
*
*代码示例如下：
* class PrimeRun implements Runnable {
         long minPrime;
         PrimeRun(long minPrime) {
             this.minPrime = minPrime;
         }

         public void run() {
             // compute primes larger than minPrime
              . . .
         }
     }

//The following code would then create a thread and start it running:

     PrimeRun p = new PrimeRun(143);
     new Thread(p).start();

Java 中线程的分类：一：守护线程，二：用户线程

两种创建线程的方式比较
* 开发中，优先选择实现Runnable接口
*   ①实现的方式没有类的单继承性的限制
*
*   ②实现的方式更适合处理多个线程有共享数据的情况
*
* 联系：class Thread implements Runnable
* 相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()方法中